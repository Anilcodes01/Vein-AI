generator client {   
  provider = "prisma-client-js" 
}  

datasource db {   
  provider = "postgresql"   
 url      = env("DATABASE_URL")
}  

model User {   
  id            String          @id @default(cuid())   
  name          String?   
  email         String          @unique   
  username      String?         @unique   
  password      String?   
  emailVerified DateTime?   
  image         String?   
  accounts      Account[]   
  sessions      Session[]   
  userDetails   UserDetails[]
  userDashData UserDashData[]

  createdAt     DateTime @default(now())   
  updatedAt     DateTime @updatedAt 

}  

model UserDetails {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id])
  age              Int?
  identity         Identity?
  height           Int?
  weight           Int?
  activityLevel    ActivityLevel?
  averageSleep     AverageSleep?
  fitnessSuperpower FitnessSuperpower?
  mainGoals        String[] 
  preferredWorkouts String[] 
  dietaryApproaches String[] 
  biggestChallenges String[] 
  rawData          Json?    
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model UserDashData {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  calorieIntake Int
  proteinIntake Int
  fatIntake Int
  carbohydrateIntake Int
  waterIntake Int
}

enum FitnessSuperpower {     
  NEVER_FEEL_TIRED         
  INSTANT_MUSCLE_GAIN      
  EFFORTLESS_HEALTHY_EATING    
  UNSHAKEABLE_MOTIVATION  
}  

enum AverageSleep {   
  LESS_THAN_4   
  BETWEEN_4_TO_6   
  SOLID_6_TO_8   
  MORE_THAN_8 
}  

enum ActivityLevel {   
  RELAXED_HOMEBODY   
  CASUAL_MOVER   
  PRETTY_ACTIVE   
  FITNESS_BEAST 
}  

enum Identity {   
  Male   
  Female   
  Other
}  


model Account {   
  userId            String   
  type              String   
  provider          String   
  providerAccountId String   
  refresh_token     String?   
  access_token      String?   
  expires_at        Int?   
  token_type        String?   
  scope             String?   
  id_token          String?   
  session_state     String?     

  createdAt         DateTime @default(now())   
  updatedAt         DateTime @updatedAt     

  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)     

  @@id([provider, providerAccountId]) 
}   

model Session {   
  sessionToken  String @unique   
  userId        String   
  expires       DateTime   
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)     

  createdAt     DateTime @default(now())   
  updatedAt     DateTime @updatedAt 
}   

model VerificationToken {   
  identifier  String   
  token       String   
  expires     DateTime     

  @@id([identifier, token]) 
}  
